spring.application.name=gateways-service
server.port=8080
spring.jackson.time-zone=Asia/Kolkata


logging.pattern.console = ${LOGPATTERN_CONSOLE:%green(%d{HH:mm:ss.SSS}) %blue(%-5level) %red([%thread]) %yellow(%logger{15}) - %msg%n}


#Please connect with eureka to get information about microservice
spring.cloud.gateway.discovery.locator.enabled=true
spring.cloud.gateway.discovery.locator.lowerCaseServiceId=true

eureka.instance.preferIpAddress=true
eureka.client.registerWithEureka=true
eureka.client.fetchRegistry=true
eureka.client.serviceUrl.defaultZone=http://localhost:8081/discovery/eureka/

management.endpoints.web.exposure.include=*
#Enable gateway related endpoints inside actuator
management.endpoint.gateway.enabled=true
management.info.env.enabled=true
#expose readiness
management.health.readiness-state.enabled=true
#expose liveness
management.health.liveness-state.enabled=true
#expose endpoint web URL for above
management.endpoint.health.probes.enabled=true

info.app.name=gateways-service
info.app.description=Gateway server for MicroserviceMaster
info.app.version=1.0.0

logging.level.root= INFO
logging.level.org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator= INFO
logging.level.org.springframework.cloud.gateway= TRACE

#monitor 5 request before moving to close from  open
resilience4j.circuitbreaker.configs.default.slidingWindowSize=5
#send 2 request in half open and decide which state to go open or closed
resilience4j.circuitbreaker.configs.default.permittedNumberOfCallsInHalfOpenState=2
#if 50% request are failing then go to open state
resilience4j.circuitbreaker.configs.default.failureRateThreshold=50
#Will wait 10 seconds before going to half open
resilience4j.circuitbreaker.configs.default.waitDurationInOpenState=10000

spring.cloud.gateway.httpclient.connect-timeout=1000
spring.cloud.gateway.httpclient.response-timeout=2s


#
#Identity service Route
spring.cloud.gateway.routes[0].id=identity-service1
spring.cloud.gateway.routes[0].uri=lb://IDENTITY-SERVICE
spring.cloud.gateway.routes[0].predicates[0]=Path=/authentication/**
spring.cloud.gateway.routes[0].filters[0]=RewritePath=/authentication/?(?<segment>.*),  /identity/$\{segment}

# /product/configuration/**  will only work if it's kept before /product/**
# if /product/** is placed 1st then it will be picked for /product/configuration/**  URL

#spring.cloud.gateway.routes[1].id=product-service-configuration
#spring.cloud.gateway.routes[1].uri=lb://PRODUCT-SERVICE
#spring.cloud.gateway.routes[1].predicates[0]=Path=/product/configuration/**
#spring.cloud.gateway.routes[1].filters[0]=RewritePath=/product/?(?<segment>.*),  /$\{segment}

spring.cloud.gateway.routes[1].id=product-service
spring.cloud.gateway.routes[1].uri=lb://PRODUCT-SERVICE
spring.cloud.gateway.routes[1].predicates[0]=Path=/product/**

spring.cloud.gateway.routes[2].id=discovery-service
spring.cloud.gateway.routes[2].uri=lb://DISCOVERY-SERVICE
spring.cloud.gateway.routes[2].predicates[0]=Path=/discovery/**


spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://localhost:7080/realms/master/protocol/openid-connect/certs







